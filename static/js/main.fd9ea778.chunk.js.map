{"version":3,"sources":["Components/Dashboard/TimeBoard/TimeBoard.jsx","Components/Dashboard/TasksBoard/TaskSetting.jsx","Components/hooks/useOnClickOutside.js","Components/Dashboard/TasksBoard/TaskComponent/TaskForm.jsx","Components/Dashboard/TasksBoard/TaskComponent/Task.jsx","Components/Dashboard/TasksBoard/TaskComponent/TaskList.jsx","Components/Dashboard/TasksBoard/TaskBoard.jsx","Components/Dashboard/Dashboard.jsx","Components/Topbar/Topbar.jsx","Components/TimerSeting/TimerSetting.jsx","Components/hooks/useTimer.jsx","assets/mixkit-alarm-digital-clock-beep-989.wav","App.js","index.js"],"names":["TimeBoard","isActive","setCounter","seconds","counter","minutes","pause","start","todos","reset","content","data","startClicked","setStartClicked","activeButton","setActiveButton","handleClick","name","time","className","onClick","Pomoro","Short","Long","color","size","defaultContent","length","text","handleContent","TaskSetting","setTodos","settingOpen","setSettingOpen","style","opacity","width","marginright","removedArr","filter","todo","isComplete","useOnClickOutside","ref","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","TaskForm","edit","onSubmit","setTaskOpen","taskOpen","removeTodo","setContent","useState","value","input","setInput","notevalue","inputNote","setInputNote","addNote","setAddNote","inputRef","useRef","noteRef","handleChange","e","handleChangeNote","handleSubmit","preventDefault","id","Math","floor","random","note","autoComplete","placeholder","onChange","type","min","step","disabled","visibility","Task","completeTodo","updateTodo","isChoose","setIsChoose","setEdit","map","TaskList","updatedTodos","todoId","newValue","test","prev","item","newTodos","console","log","TaskBoard","marginTop","Dashboard","Topbar","setActiveSetting","activeSetting","href","TimerSetting","setData","autoStart","setAutoStart","autoStartPromo","setAutoStartPromo","longBreakInterval","setLongBreakInterval","input1","setInput1","input2","setInput2","input3","setInput3","longBreakInput","setLongBreakInput","useTimer","count","onFinish","setIsActive","setSeconds","setMinutes","isStart","listOfObjects","intervalId","secondCounter","minuteCounter","computedSecond","String","computedMinute","setInterval","clearInterval","App","countLongBreak","setCountLongBreak","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fd9ea778.chunk.js","sourcesContent":["import './timeboard.scss'\r\nimport { BiSkipNext} from 'react-icons/bi'\r\n\r\nconst TimeBoard = ({  isActive, setCounter, counter, seconds, minutes, pause, start, reset\r\n    , todos, content, data, startClicked, setStartClicked, activeButton, setActiveButton}) => {\r\n    \r\n    const handleClick = (name, time) => {\r\n        setActiveButton(name);\r\n        setCounter(time);\r\n    }\r\n\r\n    const handleContent = (content) => {\r\n        const defaultContent = 'Time to focus';\r\n\r\n        if(content === '')\r\n            return defaultContent\r\n        else{\r\n            if(content === \"deleted\") {\r\n                if(todos.length === 0)\r\n                    return defaultContent\r\n                else\r\n                    return todos[0].text\r\n            }\r\n            return content\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"timeboard\">\r\n            <div className=\"timeboard-wrapper\">\r\n                <div className=\"timeboard-button-wrapper\">\r\n                    <button\r\n                        name=\"Pomodoro\"\r\n                        className={activeButton === \"Pomodoro\" ? \"active-timeboard-status-button\" : \"timeboard-status-button\"}\r\n                        onClick={() => handleClick(\"Pomodoro\", data.Pomoro)}\r\n                    >Pomodoro</button>\r\n                    <button\r\n                        name=\"Short Break\"\r\n                        className={activeButton === \"Short Break\" ? \"active-timeboard-status-button\" : \"timeboard-status-button\"}\r\n                        onClick={() => handleClick(\"Short Break\", data.Short)}\r\n                    >Short Break</button>\r\n                    <button\r\n                        name=\"Long Break\"\r\n                        className={activeButton === \"Long Break\" ? \"active-timeboard-status-button\" : \"timeboard-status-button\"}\r\n                        onClick={() => handleClick(\"Long Break\", data.Long)}\r\n                    >Long Break</button>\r\n                </div>\r\n                <div className=\"timer\">\r\n                    {`${minutes} : ${seconds}`}\r\n                </div>\r\n                <div className=\"start-button-wrapper\">\r\n                    <button \r\n                        className={\"start-button \" + (isActive && 'active')}\r\n                        onClick={() => {\r\n                            isActive ? pause() : start();\r\n                            setStartClicked(!startClicked)\r\n                            }}>\r\n                    {isActive ? \"PAUSE\" : \"START\"}\r\n                    </button>\r\n                    <div className=\"next-button-wrapper\">\r\n                        <button \r\n                            className={\"next-button \"  + (startClicked && \"active\")}\r\n\r\n                        ><BiSkipNext color='white' size='50'/></button>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n            <div className=\"sessionNumber\">\r\n                #1                    \r\n            </div>\r\n            <div className=\"taskName\">\r\n                {handleContent(content)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimeBoard\r\n","import './tasksettingmenu.scss'\r\n\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { AiOutlineCheck, AiOutlineSave } from \"react-icons/ai\";\r\nimport { GrAdd } from \"react-icons/gr\";\r\n\r\n\r\nconst TaskSetting = ({ todos, setTodos, settingOpen, setSettingOpen}) => {\r\n    \r\n\r\n    const style = {opacity: \"0.8\",\r\n    width: \"14px\",\r\n    marginright: \"8px\",}\r\n\r\n    const handleClearAllTask = () => {\r\n        setSettingOpen(!settingOpen);\r\n        setTodos([])\r\n    }\r\n\r\n    const handleFinishedTask = () => {\r\n\r\n        const removedArr = [...todos].filter(todo => todo.isComplete !== true);\r\n        setSettingOpen(!settingOpen);\r\n        setTodos(removedArr);\r\n    }\r\n\r\n    return (\r\n        <div className={'TaskSettingMenu ' + (settingOpen && 'active')}>\r\n            <div className=\"Options\" onClick={handleClearAllTask}>\r\n                <RiDeleteBin5Line style={style}/>Clear all tasks\r\n            </div>\r\n            <div className=\"Options\" onClick={handleFinishedTask}>\r\n                <RiDeleteBin5Line style={style} />Clear finished tasks\r\n            </div>\r\n            <div className=\"Options\">\r\n                <AiOutlineCheck style={style}/>Clear acts\r\n            </div>\r\n            <div className=\"Options\">\r\n                <AiOutlineSave style={style}/>Clear acts\r\n            </div>\r\n            <div className=\"Options\">\r\n                <GrAdd style={style}/>Clear acts\r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskSetting\r\n","import { useEffect } from \"react\";\r\n\r\nfunction useOnClickOutside(ref, handler) {\r\n    useEffect(\r\n      () => {\r\n        const listener = (event) => {\r\n          // Do nothing if clicking ref's element or descendent elements\r\n          if (!ref.current || ref.current.contains(event.target)) {\r\n            return;\r\n          }\r\n          handler(event);\r\n        };\r\n        document.addEventListener(\"mousedown\", listener);\r\n        document.addEventListener(\"touchstart\", listener);\r\n        return () => {\r\n          document.removeEventListener(\"mousedown\", listener);\r\n          document.removeEventListener(\"touchstart\", listener);\r\n        };\r\n      },\r\n      // Add ref and handler to effect dependencies\r\n      // It's worth noting that because passed in handler is a new ...\r\n      // ... function on every render that will cause this effect ...\r\n      // ... callback/cleanup to run every render. It's not a big deal ...\r\n      // ... but to optimize you can wrap handler in useCallback before ...\r\n      // ... passing it into this hook.\r\n      [ref, handler]\r\n    );\r\n  }\r\n\r\nexport default useOnClickOutside\r\n","import { useState, useRef } from 'react';\r\nimport { FaArrowUp, FaArrowDown } from \"react-icons/fa\";\r\n\r\nimport useOnClickOutside from \"../../../hooks/useOnClickOutside\";\r\n\r\n\r\nfunction TaskForm({ edit, onSubmit, setTaskOpen, taskOpen, removeTodo, setContent, content }) {\r\n    const [input, setInput] = useState(edit ? edit.value : '');\r\n    const [inputNote, setInputNote] = useState(edit ? edit.notevalue : '');\r\n\r\n    // Check note state\r\n    const [addNote, setAddNote] = useState(false);\r\n\r\n    const inputRef = useRef(null);\r\n    const noteRef = useRef(null);\r\n\r\n    const ref = useRef()\r\n    useOnClickOutside(ref, () => setTaskOpen(false))\r\n\r\n    // Point to todo input when click Add Task\r\n    // useEffect(() => {\r\n    //     inputRef.current.focus();\r\n    //     noteRef.current.focus();\r\n    // }, [inputRef, noteRef]);\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleChangeNote = e => {\r\n        setInputNote(e.target.value);\r\n        // if(e.target.value !== '')\r\n        //     setTaskOpen(!taskOpen);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        setTaskOpen(!taskOpen)\r\n        onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input,\r\n            note: inputNote\r\n        });\r\n\r\n        if (content === '')\r\n            setContent(input)\r\n        setInput('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} ref={ref} autoComplete=\"off\" className='TodoForm'>\r\n            {edit ? (\r\n                <>\r\n                    <div className=\"InputPart\" >\r\n                        <div className=\"first-input\">\r\n                            <input\r\n                                placeholder='Update your item'\r\n                                value={input}\r\n                                onChange={handleChange}\r\n                                name='text'\r\n                                className='todo-input'\r\n                                ref={inputRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"second-input\">\r\n                            <div className=\"second-input-wrapper\">\r\n                                <span>This is something I don't know</span>\r\n                                <input\r\n\r\n                                    type='number'\r\n                                    min='0'\r\n                                    step='1'\r\n                                    // value={input}\r\n                                    onChange={handleChange}\r\n                                    name='text'\r\n                                    className='time-input'\r\n                                // ref={inputRef}\r\n                                />\r\n                                <button className=\"increase-button\">\r\n                                    <FaArrowUp />\r\n                                </button>\r\n                                <button className=\"decrease-button\">\r\n                                    <FaArrowDown />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"last-input\">\r\n                            {(inputNote !== '') ?\r\n                                <textarea\r\n                                    className=\"note-input\"\r\n                                    placeholder='Some notes...'\r\n                                    name=\"\"\r\n                                    value={inputNote}\r\n                                    id=\"\"\r\n                                    onChange={handleChangeNote}\r\n                                    ref={noteRef}\r\n                                ></textarea>\r\n                                :\r\n                                (!addNote) ?\r\n                                    <button className=\"AddNote\" onClick={() => (setAddNote(!addNote))}>\r\n                                        + Add Note\r\n                                    </button>\r\n                                    :\r\n                                    <textarea\r\n                                        className=\"note-input\"\r\n                                        placeholder='Some notes...'\r\n                                        name=\"\"\r\n                                        value={inputNote}\r\n                                        id=\"\"\r\n                                        onChange={handleChangeNote}\r\n                                        ref={noteRef}\r\n                                    > </textarea>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"SubmitPart\">\r\n                        <button className=\"DeleteButton\" onClick={() => { removeTodo(edit.id); setTaskOpen(!taskOpen); setContent('deleted') }}>\r\n                            Delete\r\n                        </button>\r\n                        <div className=\"Button-wrapper\">\r\n                            <button className=\"CancelButton\" onClick={() => (setTaskOpen(!taskOpen))}>\r\n                                Cancel\r\n                            </button>\r\n                            <button disabled={!input} className=\"SubmitButton\" onClick={handleSubmit} >\r\n                                Save\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </>) : (\r\n                <>\r\n                    <div className=\"InputPart\" >\r\n                        <div className=\"first-input\">\r\n                            <input\r\n                                placeholder='What are you working on?'\r\n                                value={input}\r\n                                onChange={handleChange}\r\n                                name='text'\r\n                                className='todo-input'\r\n                                ref={inputRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"second-input\">\r\n                            <div className=\"second-input-wrapper\">\r\n                                <span>This is something I don't know</span>\r\n                                <input\r\n\r\n                                    type='number'\r\n                                    min='0'\r\n                                    step='1'\r\n                                    // value={input}\r\n                                    onChange={handleChange}\r\n                                    name='text'\r\n                                    className='time-input'\r\n                                // ref={inputRef}\r\n                                />\r\n                                <button className=\"increase-button\">\r\n                                    <FaArrowUp />\r\n                                </button>\r\n                                <button className=\"decrease-button\">\r\n                                    <FaArrowDown />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"last-input\">\r\n                            {(!addNote) ?\r\n                                <button className=\"AddNote\" onClick={() => (setAddNote(!addNote))}>\r\n                                    + Add Note\r\n                                </button>\r\n                                :\r\n                                <textarea\r\n                                    className=\"note-input\"\r\n                                    placeholder='Some notes...'\r\n                                    name=\"\"\r\n                                    value={inputNote}\r\n                                    id=\"\"\r\n                                    onChange={handleChangeNote}\r\n                                    ref={noteRef}></textarea>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"SubmitPart\">\r\n                        <button style={{ visibility: 'hidden' }}>\r\n\r\n                        </button>\r\n                        <div className=\"Button-wrapper\">\r\n                            <button className=\"CancelButton\" onClick={() => (setTaskOpen(!taskOpen))}>\r\n                                Cancel\r\n                            </button>\r\n                            <button disabled={!input} className=\"SubmitButton\" onClick={handleSubmit} >\r\n                                Save\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </>)\r\n            }\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nexport default TaskForm\r\n","import { useState } from 'react'\r\n\r\nimport { AiFillCheckCircle, AiOutlineBars } from \"react-icons/ai\";\r\n\r\nimport TaskForm from './TaskForm';\r\n\r\nconst Task = ({ todos, completeTodo, removeTodo, updateTodo, isChoose, setIsChoose, content, setContent, setTaskOpen, taskOpen }) => {\r\n\r\n    // Check if edit?\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: '',\r\n        notevalue: ''\r\n    });\r\n\r\n\r\n    // submit to update????\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id: null,\r\n            value: '',\r\n            notevalue: ''\r\n        });\r\n    };\r\n\r\n    if (edit.id) {\r\n        return <TaskForm edit={edit} onSubmit={submitUpdate} setTaskOpen={setTaskOpen} taskOpen={taskOpen} removeTodo={removeTodo} setContent={setContent}/>;\r\n    }\r\n\r\n    //0 === 0; index = 1\r\n\r\n    return todos.map((todo) => (\r\n        <div className=\"output-container-main\">\r\n            <div key={todo.id} className={\"output-container-sub \" + ((isChoose === todo.id) && \"active\")}>\r\n                <div className=\"output-wrapper\" onClick={() => {setIsChoose(todo.id); setContent(todo.text)}}>\r\n                    <div className=\"left-part\">\r\n                        <div className=\"check-icon\" key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                            <AiFillCheckCircle className={todo.isComplete ? \"check-button\" : \"uncheck-button\"} size=\"27px\" />\r\n                        </div>\r\n                        <span className={todo.isComplete ? \"uncheck-content\" : \"content\"}>\r\n                            {todo.text}\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"right-part\">\r\n                        <span></span>\r\n                        <div className=\"edit-button-wrapper\" onClick={() => setEdit({ id: todo.id, value: todo.text, notevalue: todo.note })}>\r\n                            <AiOutlineBars size=\"20px\" className=\"edit-button\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {todo.note !== '' ? \r\n                <div className=\"note-wrapper\" onClick={() => {setIsChoose(todo.id); setContent(todo.text)}}>\r\n                    <p className=\"note-content\">{todo.note}</p>\r\n                </div>\r\n                : ''}\r\n            </div>\r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default Task\r\n","import React, { useState } from \"react\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport Task from \"./Task\";\r\nimport TaskForm from \"./TaskForm\";\r\n\r\nconst TaskList = ({todos, setTodos, content, setContent}) => {\r\n\r\n    const [taskOpen, setTaskOpen] = useState(false);\r\n\r\n    // Run based on index of task\r\n    const [isChoose, setIsChoose] = useState(0);\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n\r\n        //Missing note\r\n\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos);\r\n        console.log(...todos);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n        // If the id is correct then make the item in todos to be newValue\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    };\r\n\r\n\r\n    const removeTodo = id => {\r\n        const removedArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n        setTodos(removedArr);\r\n    };\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n\r\n    return (\r\n        <> \r\n            \r\n            <Task \r\n                todos={todos}  \r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n                isChoose={isChoose} \r\n                setIsChoose={setIsChoose}\r\n                content={content}\r\n                setContent={setContent}\r\n                taskOpen={taskOpen} \r\n                setTaskOpen={setTaskOpen}\r\n                \r\n            />\r\n            {!taskOpen ? \r\n            <div className=\"AddTask-wrapper\" onClick={() => (setTaskOpen(!taskOpen))}>\r\n                <div className=\"AddIcon\">\r\n                    <AiOutlinePlusCircle size=\"24\" color=\"white\"/>\r\n                </div>\r\n                <div className=\"AddTask-name\" \r\n                >\r\n                    Add Task            \r\n                </div>\r\n            </div>\r\n                : <TaskForm taskOpen={taskOpen} content={content} setContent={setContent} setTaskOpen={setTaskOpen} onSubmit={addTodo} />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskList\r\n","import './taskboard.scss'\r\nimport { IoMdArrowDropdown } from \"react-icons/io\";\r\nimport { useState, useRef } from 'react';\r\nimport TaskSetting from './TaskSetting';\r\nimport TaskList from './TaskComponent/TaskList';\r\nimport useOnClickOutside from '../../hooks/useOnClickOutside';\r\nconst TaskBoard = ({todos, setTodos, content, setContent}) => {\r\n    const [settingOpen, setSettingOpen] = useState(false)\r\n\r\n    const ref = useRef()\r\n\r\n    useOnClickOutside(ref, () => setSettingOpen(false));\r\n\r\n    return (\r\n        <div className=\"TaskBoard\">\r\n            <div className=\"TaskSetting-wrapper\">\r\n                <span className=\"TaskName\">\r\n                    Tasks\r\n                </span>\r\n                <div className=\"TaskSetting\" ref={ref}>\r\n                    <button className=\"SettingButton\" onClick={() => (setSettingOpen(!settingOpen))}>\r\n                        <IoMdArrowDropdown size=\"20\"/>\r\n                    </button>\r\n                    <TaskSetting todos={todos} setTodos={setTodos} settingOpen={settingOpen} setSettingOpen={setSettingOpen}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"justALine\" style={{marginTop: \"18px\"}}></div>\r\n            \r\n            <TaskList todos={todos} setTodos={setTodos} content={content} setContent={setContent}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskBoard\r\n","import './dashboard.scss'\r\nimport TimeBoard from './TimeBoard/TimeBoard'\r\nimport { useState } from 'react'\r\nimport TaskBoard from './TasksBoard/TaskBoard'\r\n\r\nconst Dashboard = ({setCounter, startClicked, setStartClicked, isActive, counter, seconds, minutes, pause, start, reset, \r\n    data, activeButton, setActiveButton}) => {\r\n    \r\n    const [content, setContent] = useState('')\r\n    const [todos, setTodos] = useState([])\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <div className=\"dashboard-wrapper\">\r\n                <TimeBoard startClicked={startClicked} setStartClicked={setStartClicked}\r\n                activeButton={activeButton} setActiveButton={setActiveButton} data={data} content={content} todos={todos}\r\n                isActive={isActive} counter={counter} seconds={seconds} setCounter={setCounter} minutes={minutes} pause={pause} start={start} reset={reset}\r\n                />\r\n                \r\n                <TaskBoard todos={todos} setTodos={setTodos} content={content} setContent={setContent}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","import {AiFillCheckCircle, AiFillSetting} from 'react-icons/ai'\r\nimport { BiUserPin} from 'react-icons/bi'\r\nimport { HiOutlineDocumentReport} from 'react-icons/hi'\r\n\r\nimport './topbar.scss'\r\nconst Topbar = ({setActiveSetting, activeSetting}) => {\r\n\r\n    return (\r\n        <div className=\"Topbar\">\r\n            <div className=\"left\">\r\n                <a href=\"\"><AiFillCheckCircle color='white' size='20' />Pomodoro Timer Clone</a>\r\n            </div>\r\n\r\n            <div className=\"right\">\r\n                <button className=\"report-button\" >\r\n                    <HiOutlineDocumentReport size='20'/>\r\n                    <div className=\"report-button-name\">Report</div>\r\n                </button>\r\n                <button className=\"setting-button\" onClick={() => setActiveSetting(!activeSetting)}>\r\n                    <AiFillSetting size='20'/>\r\n                    <div className=\"setting-button-name\">Setting</div>\r\n                </button>\r\n                <button className=\"login-button\">\r\n                    <BiUserPin size='20'/>\r\n                    <div className=\"login-button-name\">Login</div>\r\n                </button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Topbar\r\n","import './timersetting.scss'\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport useOnClickOutside from '../hooks/useOnClickOutside'\r\nimport { useState } from 'react'\r\nimport { useRef } from 'react'\r\nimport React from 'react'\r\n\r\nconst TimerSetting = ({ activeSetting, setActiveSetting,\r\n    data, setData, minutes, autoStart, setAutoStart, autoStartPromo, setAutoStartPromo, longBreakInterval, setLongBreakInterval }) => {\r\n\r\n    const ref = useRef()\r\n    useOnClickOutside(ref, () => setActiveSetting(false));\r\n\r\n    // array\r\n    const [input1, setInput1] = useState(data.Pomoro);\r\n    const [input2, setInput2] = useState(data.Short);\r\n    const [input3, setInput3] = useState(data.Long);\r\n    const [longBreakInput, setLongBreakInput] = useState(longBreakInterval);\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        setData({\r\n            Pomoro: input1,\r\n            Short: input2,\r\n            Long: input3,\r\n        })\r\n        setLongBreakInterval(longBreakInput);\r\n\r\n        setActiveSetting(!activeSetting)\r\n    }\r\n   \r\n    const handleCancel = (e) => {\r\n        e.preventDefault();\r\n\r\n        setInput1(data.Pomoro);\r\n        setInput2(data.Short);\r\n        setInput3(data.Long);\r\n        setLongBreakInput(longBreakInterval);\r\n\r\n        setActiveSetting(!activeSetting)\r\n    }\r\n\r\n    return (\r\n        <div className=\"timer-setting\" ref={ref}>\r\n            <GiCancel className=\"cancel-button\" onClick={handleCancel} />\r\n            <div className=\"timer-setting-container\">\r\n                <div className=\"timer-setting-wrapper\">\r\n                    <div className=\"timer-setting-name\">TIMER SETTINGS</div>\r\n                    <div className=\"setting-config\">\r\n                        <div className=\"time-config\">\r\n                            <div className=\"time-config-name\">\r\n                                <span>Time (minutes)</span>\r\n                            </div>\r\n                            <div className=\"time-config-time\">\r\n                                <div className=\"config-cell\">\r\n                                    <label className=\"config-cell-label\">Pomodoro</label>\r\n                                    <input type=\"number\" min=\"0\" step=\"1\" name=\"Pomodoro\" onChange={(e) => setInput1(e.target.value)} value={input1} className=\"config-cell-input\"/>                                       \r\n                                </div>\r\n                                <div className=\"config-cell\">\r\n                                    <label className=\"config-cell-label\">Short Break</label>\r\n                                    <input type=\"number\" min=\"0\" step=\"1\" name=\"Short\" onChange={(e) => setInput2(e.target.value)} value={input2} className=\"config-cell-input\"/>                                       \r\n                                </div>\r\n                                <div className=\"config-cell\">\r\n                                    <label className=\"config-cell-label\">Long Break</label>\r\n                                    <input type=\"number\" min=\"0\" step=\"1\" name=\"Long\" onChange={(e) => setInput3(e.target.value)} value={input3} className=\"config-cell-input\"/>                                       \r\n                                </div>\r\n    \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"setting-config\">\r\n                            <div className=\"setting-config-wrapper\">\r\n                                <div className=\"setting-config-name\">\r\n                                    <span>Auto start Breaks?</span>\r\n                                </div>\r\n                                <div className={\"on-off-button \"  + (autoStart && 'active')} \r\n                                onClick={() => setAutoStart(!autoStart)}>\r\n                                    <div className=\"attr\"></div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"setting-config\">\r\n                            <div className=\"setting-config-wrapper\">\r\n                                <div className=\"setting-config-name\">\r\n                                    <span>Auto start Pomodoros?</span>\r\n                                </div>\r\n                                <div className={\"on-off-button \"  + (autoStartPromo && 'active')} \r\n                                onClick={() => setAutoStartPromo(!autoStartPromo)}>\r\n                                    <div className=\"attr\"></div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"setting-config\">\r\n                            <div className=\"setting-config-wrapper\">\r\n                                <div className=\"setting-config-name\">\r\n                                    <span>Long Break interval</span>\r\n                                </div>\r\n                                <input type=\"number\" className=\"long-break-interval-input\" onChange={(e) => setLongBreakInput(e.target.value)} min=\"1\" step=\"1\" width=\"70\" value={longBreakInput} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"setting-config\">\r\n                            <div className=\"setting-config-wrapper\">\r\n                                <div className=\"setting-config-name\">\r\n                                    <span>Alarm Sound</span>\r\n                                </div>\r\n                                <div className=\"volume-modifier\"></div>\r\n                                <div className=\"frequency-volume-wrapper\">\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"setting-config\">\r\n                            <div className=\"setting-config-wrapper\">\r\n                                <div className=\"setting-config-name\">\r\n                                    <span>Ticking Sound</span>\r\n                                </div>\r\n                                <div className=\"on-off-button\"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"setting-config\">\r\n                            <div className=\"setting-config-wrapper\">\r\n                                <div className=\"setting-config-name\">\r\n                                    <span>Dark Mode when running</span>\r\n                                </div>\r\n                                <div className=\"on-off-button\"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"setting-config\">\r\n                            <div className=\"setting-config-wrapper\">\r\n                                <div className=\"setting-config-name\">\r\n                                    <span>Notification</span>\r\n                                </div>\r\n                                <div className=\"on-off-button\"></div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"last-button\" onClick={handleSubmit}>\r\n                    <button className=\"ok-button\">OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimerSetting\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useTimer = (count, onFinish) => {\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [counter, setCounter] = useState(count);\r\n    const [seconds, setSeconds] = useState(\"\");\r\n    const [minutes, setMinutes] = useState(\"\");\r\n    const [isStart, setIsStart] = useState(true);\r\n\r\n    useEffect(() => {setCounter((count),\r\n        //important part\r\n        [count.listOfObjects] // <= means: run this effect only if any variable\r\n        // in that array is different from the last run\r\n        )\r\n        // if(autoStart)\r\n        //     start();\r\n        // else\r\n        //     pause();\r\n    }, [count])\r\n\r\n    useEffect(() => {\r\n        let intervalId;\r\n        // Just given out the timer\r\n        if (isStart) {\r\n            const secondCounter = (counter) % 60;\r\n            const minuteCounter = Math.floor((counter % 3600) / 60);\r\n\r\n            const computedSecond =\r\n                String(secondCounter).length === 1\r\n                    ? `0${secondCounter}`\r\n                    : secondCounter;\r\n            const computedMinute =\r\n                String(minuteCounter).length === 1\r\n                    ? `0${minuteCounter}`\r\n                    : minuteCounter;\r\n\r\n            setSeconds(computedSecond);\r\n            setMinutes(computedMinute);\r\n        }\r\n\r\n        if (isActive) {\r\n            intervalId = setInterval(() => {\r\n                if (counter >= 1) {\r\n                    setCounter((counter) => counter - 1);\r\n                } else {\r\n                    setIsActive(false);\r\n                    if (onFinish) {\r\n                        onFinish();\r\n                    }\r\n                }\r\n\r\n                const secondCounter = counter % 60;\r\n                const minuteCounter = Math.floor((counter % 3600) / 60);\r\n\r\n                const computedSecond =\r\n                    String(secondCounter).length === 1\r\n                        ? `0${secondCounter}`\r\n                        : secondCounter;\r\n                const computedMinute =\r\n                    String(minuteCounter).length === 1\r\n                        ? `0${minuteCounter}`\r\n                        : minuteCounter;\r\n\r\n                setSeconds(computedSecond);\r\n                setMinutes(computedMinute);\r\n            }, 1000);\r\n        }\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, [isStart, isActive, counter, onFinish]);\r\n\r\n    function pause() {\r\n        setIsActive(false);\r\n    }\r\n\r\n    // Start function\r\n    function start() {\r\n        setIsActive(true);\r\n    }\r\n\r\n    function reset() {\r\n\r\n        setCounter(count);\r\n        setSeconds(\"00\");\r\n        setMinutes(\"00\");\r\n        setIsActive(false);\r\n    }\r\n\r\n    return {\r\n        isActive,\r\n        counter,\r\n        seconds,\r\n        minutes,\r\n        pause,\r\n        start,\r\n        reset,\r\n        setCounter,\r\n        \r\n    };\r\n};\r\n\r\nexport default useTimer","export default __webpack_public_path__ + \"static/media/mixkit-alarm-digital-clock-beep-989.1d012d48.wav\";","import Dashboard from \"./Components/Dashboard/Dashboard\";\nimport Topbar from \"./Components/Topbar/Topbar\";\nimport { useState, useEffect, useRef } from \"react\";\nimport './app.scss'\nimport TimerSetting from \"./Components/TimerSeting/TimerSetting\";\nimport useTimer from \"./Components/hooks/useTimer\";\n\nimport digitalAlarm from './assets/mixkit-alarm-digital-clock-beep-989.wav'\n\nfunction App() {\n  const [startClicked, setStartClicked] = useState(false);\n  const [activeButton, setActiveButton] = useState(\"Pomodoro\");\n\n  const [activeSetting, setActiveSetting] = useState(false);\n  const [longBreakInterval, setLongBreakInterval] = useState(2);\n  const [countLongBreak, setCountLongBreak] = useState(0);\n  const obj = {\n    Pomoro: 3,\n    Short: 2,\n    Long: 4,  \n  };\n\n  const [data, setData] = useState(obj)\n  \n  const [autoStart, setAutoStart] = useState(false);\n  const [autoStartPromo, setAutoStartPromo] = useState(false);\n\n  const { isActive,\n    counter,\n    setCounter,\n    seconds,\n    minutes,\n    pause,\n    start,\n    reset, } = useTimer(data.Pomoro, handleTimerFinish);\n\n  // Pomo -> Short, after 4 loop Pomo -> Long\n  function handleTimerFinish() {  \n    if (activeButton === \"Pomodoro\") {\n      if(countLongBreak === longBreakInterval){\n        setActiveButton(\"Long Break\");\n        setCounter(data.Long)\n        if(autoStart)\n          start();\n      }\n      else {\n        setActiveButton(\"Short Break\");\n        setCounter(data.Short)\n        console.log('longBreakInterval: ' + longBreakInterval)\n        if(autoStart)\n          start();\n        \n      }\n    }\n\n    if (activeButton === \"Short Break\") {\n      setCountLongBreak(countLongBreak + 1)\n      console.log('countLongBreak: '+countLongBreak)\n      if(countLongBreak === longBreakInterval) {\n        setActiveButton(\"Long Break\");\n        setCounter(data.Long)\n        if(autoStart)\n          start();\n      }\n\n      else {\n        setActiveButton(\"Pomodoro\");\n        setCounter(data.Pomoro)\n        console.log(autoStart)\n        if(autoStartPromo)\n          start();\n      }\n    }\n    if (activeButton === \"Long Break\") {\n      setCountLongBreak(0)\n      setActiveButton(\"Pomodoro\");\n      setCounter(data.Pomoro);\n      if(autoStartPromo)\n        start();\n    }\n  }\n  // App\n  // activeButton === \"Pomodoro\"\n  return (\n    <>\n      <div className=\n        {\"App \" + ((activeButton === \"Pomodoro\") ? \"\" : ((activeButton === \"Short Break\") ? \"activeShort\" : \"activeLong\"))}\n      >\n        <Topbar activeSetting={activeSetting} setActiveSetting={setActiveSetting} />\n        <Dashboard activeButton={activeButton} setActiveButton={setActiveButton} data={data}\n          startClicked={startClicked} setStartClicked={setStartClicked} isActive={isActive} counter={counter} setCounter={setCounter} seconds={seconds} minutes={minutes} pause={pause} start={start} reset={reset}\n        />\n      </div>\n      <div className={activeSetting === true ? \"timer-setting-main-active\" : \"timer-setting-main\"}>\n        <TimerSetting activeSetting={activeSetting} setActiveSetting={setActiveSetting}\n          data={data} setData={setData} minutes={minutes}\n          autoStart={autoStart} setAutoStart={setAutoStart} autoStartPromo={autoStartPromo} setAutoStartPromo={setAutoStartPromo}\n          longBreakInterval={longBreakInterval} setLongBreakInterval={setLongBreakInterval}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}